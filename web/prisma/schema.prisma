generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(uuid())
  clerkId        String?         @unique
  email          String          @unique
  imageUrl       String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  firstName      String
  lastName       String
  roles          UserRole[]      @default([MEMBER])
  blogs          Blog[]
  donations      Donation[]
  events         Event[]         @relation("EventOrganizer")
  attendees      EventAttendee[]
  createdReports Report[]
  teamMembers    TeamMember[]
}

model Blog {
  id        String   @id @default(uuid())
  title     String
  content   String
  filename  String
  imageUrl  String?
  published Boolean  @default(false)
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id])
}

model Donation {
  id         String         @id @default(uuid())
  amount     Float
  currency   String         @default("USD")
  campaignId String?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  donorId    String
  paymentId  String         @unique
  status     DonationStatus @default(PENDING)
  campaign   Campaign?      @relation(fields: [campaignId], references: [id])
  donor      User           @relation(fields: [donorId], references: [id])
}

model Campaign {
  id          String     @id @default(uuid())
  title       String
  description String
  target      Float
  raised      Float      @default(0)
  imageUrl    String?
  active      Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  endDate     DateTime?
  startDate   DateTime
  donations   Donation[]
}

model Event {
  id          String          @id @default(uuid())
  title       String
  description String
  location    String
  startDate   DateTime
  endDate     DateTime
  imageUrl    String?
  organizerId String
  capacity    Int?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  organizer   User            @relation("EventOrganizer", fields: [organizerId], references: [id])
  attendees   EventAttendee[]
}

model EventAttendee {
  id        String   @id @default(uuid())
  userId    String
  eventId   String
  status    String   @default("registered")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
}

model Report {
  id               String   @id @default(uuid())
  title            String
  totalDonation    Float    @default(0)
  totalEvents      Int      @default(0)
  activeVolunteers Int      @default(0)
  createdById      String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  reportData       Json?
  createdBy        User     @relation(fields: [createdById], references: [id])
}

model Partner {
  id          String   @id @default(uuid())
  name        String
  description String
  imageUrl    String?
  websiteUrl  String?
  dateJoined  DateTime @default(now())
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Team {
  id          String       @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  members     TeamMember[]
}

model TeamMember {
  id       String   @id @default(uuid())
  userId   String
  teamId   String
  role     String   @default("member")
  joinedAt DateTime @default(now())
  team     Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
}

enum UserRole {
  MEMBER
  ADMIN
  SUPER_ADMIN
}

enum DonationStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
